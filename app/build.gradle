apply plugin: 'com.android.application'
apply from: "../config.gradle"

def getTime() {
    return new Date().format("yyyyMMdd-hhmm", TimeZone.getDefault());
}

android {
    signingConfigs {
        config {
            keyAlias 'lxp_project'
            keyPassword '123456'
            storeFile file('../key/lxpkey.jks')
            storePassword '123456'
        }
    }
    compileSdkVersion android.compileSdkVersion
    buildToolsVersion android.buildToolsVersion
    defaultConfig {
        applicationId android.applicationId
        minSdkVersion android.minSdkVersion
        targetSdkVersion android.targetSdkVersion
        signingConfig signingConfigs.config
        versionCode = android.versionCode
        versionName = android.versionName
        javaCompileOptions {
            annotationProcessorOptions {
                arguments = ["room.schemaLocation":
                                     "$projectDir/schemas".toString()]
            }

        }
    }
    packagingOptions {
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/DEPENDENCIES'
    }
    buildTypes {
        release {
            zipAlignEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            debuggable true
            signingConfig signingConfigs.config
        }
        debug {
            signingConfig signingConfigs.config
        }
    }

    productFlavors {
    }

    compileOptions {
        sourceCompatibility = '1.8'
        targetCompatibility = '1.8'
    }
    packagingOptions {
        exclude 'META-INF/beans.xml'
    }
    applicationVariants.all {
        variant ->
            variant.outputs.all {
                //在这里修改apk文件名，引号内的字符串都可以随便定义
                outputFileName = "MovieLibrary-${variant.name}-v${variant.versionName}-${getTime()}.apk"
            }
    }


    buildFeatures {
        dataBinding = true
    }

}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs', excludes: ['okhttp-3.6.0.jar', 'okio-1.11.0.jar'])
    implementation fileTree(include: ['*.jar'], dir: 'libs/umeng')

    implementation 'androidx.lifecycle:lifecycle-extensions:2.2.0'
    implementation 'com.google.android.material:material:1.3.0'
    implementation 'androidx.legacy:legacy-support-v13:1.0.0'
    implementation 'androidx.recyclerview:recyclerview:1.2.0'
    implementation 'androidx.appcompat:appcompat:1.3.0'

    implementation 'jp.wasabeef:glide-transformations:3.3.0'
    implementation project(':CircleRecyclerView')
    implementation 'org.jetbrains:annotations:15.0'

    //glide
    implementation 'com.github.bumptech.glide:glide:4.11.0'
    annotationProcessor 'com.github.bumptech.glide:compiler:4.11.0'
    //retrofit
    implementation 'com.squareup.retrofit2:retrofit:2.9.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.9.0'
    implementation 'com.squareup.retrofit2:adapter-rxjava3:2.9.0'
    //roomdb
    implementation "androidx.room:room-runtime:2.3.0"
    annotationProcessor "androidx.room:room-compiler:2.3.0"
    implementation "androidx.room:room-rxjava3:2.3.0"
    //rxAndroid;
    implementation 'io.reactivex.rxjava3:rxjava:3.0.13-RC4'
    implementation 'io.reactivex.rxjava3:rxandroid:3.0.0'
    //
    implementation project(':service')
    implementation project(path: ':dlna')
    implementation project(':VideoNameParser')
    implementation project(path: ':util')
    //Android-spinkit loading动画
    implementation 'com.github.ybq:Android-SpinKit:1.4.0'
    //Paging3
    //    使用 Paging 库的优势
    //    Paging 库包含以下功能：
    //
    //    分页数据的内存中缓存。该功能可确保您的应用在处理分页数据时高效利用系统资源。
    //    内置的请求重复信息删除功能，可确保您的应用高效利用网络带宽和系统资源。
    //    可配置的 RecyclerView 适配器，会在用户滚动到已加载数据的末尾时自动请求数据。
    //    对 Kotlin 协程和 Flow 以及 LiveData 和 RxJava 的一流支持。
    //    内置对错误处理功能的支持，包括刷新和重试功能。
    def paging_version = "3.0.0"
    implementation "androidx.paging:paging-runtime:$paging_version"
    // optional - RxJava3 support
    implementation "androidx.paging:paging-rxjava3:$paging_version"

}
